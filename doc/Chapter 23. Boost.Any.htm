<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Chapter 23. Boost.Any</title><link rel="stylesheet" type="text/css" href="/static/main/css/main.css"><link rel="home" href="the-boost-c++-libraries" title="The Boost C++ Libraries"><link rel="prev" href="boost.tuple" title="Chapter 22. Boost.Tuple"><link rel="next" href="boost.variant" title="Chapter 24. Boost.Variant"><meta name="viewport" content="width=device-width, initial-scale=1"><link rel="shortcut icon" href="/favicon.ico"><link rel="stylesheet" href="//cdn.jsdelivr.net/highlight.js/9.11.0/styles/vs.min.css"><script onload="hljs.initHighlightingOnLoad()" src="//cdn.jsdelivr.net/highlight.js/9.11.0/highlight.min.js"></script><script>var disqus_identifier = 'boost.any';</script><script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
      ga('create', 'UA-59953346-1', 'auto');
      ga('send', 'pageview');
    </script><script async="async" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-54ede4aa2dd8667c"></script></head><body class="chapter"><div class="relative"><header><a href="the-boost-c++-libraries"><img src="/static/main/img/boost-logo.svg" alt="" width="20" height="20" id="boost-logo">The Boost C++ Libraries</a><a href="https://twitter.com/theboostcpplibs" class="twitter"><img src="/static/main/img/twitter.png" width="17" height="14" alt="Follow @theboostcpplibs" class="twitter"></a></header><nav><ul><li><a href="the-boost-c++-libraries">The Boost C++ Libraries</a><ul><li><a href="data-structures">Part IV. Data Structures</a><ul><li><a href="boost.optional">Chapter 21. Boost.Optional</a></li><li><a href="boost.tuple">Chapter 22. Boost.Tuple</a></li><li><strong><a href="boost.any">Chapter 23. Boost.Any</a></strong></li><li><a href="boost.variant">Chapter 24. Boost.Variant</a></li><li><a href="boost.propertytree">Chapter 25. Boost.PropertyTree</a></li><li><a href="boost.dynamicbitset">Chapter 26. Boost.DynamicBitset</a></li><li><a href="boost.tribool">Chapter 27. Boost.Tribool</a></li><li><a href="boost.compressed_pair">Chapter 28. Boost.CompressedPair</a></li></ul></li></ul></li></ul>
        
<script>
  (function() {
    var cx = '011552474235077786014:zyife9oy_sk';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//cse.google.com/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<div class="gcse-search"></div>
<script>
function onAdClick() {
  var ad = document.querySelector('.ad');
  ad.style.cursor = 'default';
  var img = document.querySelector('.ad .content img');
  img.style.display = 'none';
  var links = document.getElementsByClassName('shoplink');
  for (var i = 0; i < links.length; ++i) {
    links[i].style.display = 'inline';
  }
  ga('send', 'event', 'ad', 'click', 'book');
}
</script>
  <div class="ad" onclick="onAdClick()" style="cursor:pointer;width:200px;margin-top:7px">
    <div class="title">Get the book</div>
    <div class="url">theboostcpplibraries.com</div>
    <div class="content">
      <img src="/static/main/img/book-cover-small.png" alt="The Boost C++ Libraries" width="74" height="94" style="float:left;margin-right:5px"/>
      <table style="font-size:1.2em;border-collapse:collapse">
        <tr>
          <td style="text-align:right">$45.95</td>
          <td>Print</td>
          <td class="shoplink" style="display:none"><a href="https://www.amazon.com/gp/product/1937434362/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1937434362&amp;linkCode=as2&amp;tag=theboostcppli-20&amp;linkId=ZD2OKWS6OJX5F3S3" style="text-decoration:underline" onclick="ga('send', 'event', 'ad', 'click', 'print');return true;">Amazon</a></td>
        </tr>
        <tr>
          <td style="text-align:right">$9.99</td>
          <td>Kindle</td>
          <td class="shoplink" style="display:none"><a href="https://www.amazon.com/gp/product/B00OX0KJOK/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00OX0KJOK&amp;linkCode=as2&amp;tag=theboostcppli-20&amp;linkId=B5LGTSOTEZ6C7EVL" style="text-decoration:underline" onclick="ga('send', 'event', 'ad', 'click', 'kindle');return true;">Amazon</a></td>
        </tr>
        <tr>
          <td style="text-align:right">$9.99</td>
          <td>E-book</td>
          <td class="shoplink" style="display:none"><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=F7WCSZLHDU9GN" style="text-decoration:underline" onclick="ga('send', 'event', 'ad', 'click', 'ebook');return true;">Download</a></td>
        </tr>
        <tr>
          <td style="text-align:right">$9.99</td>
          <td>PDF</td>
          <td class="shoplink" style="display:none"><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=HMMF8LP558LHL" style="text-decoration:underline" onclick="ga('send', 'event', 'ad', 'click', 'pdf');return true;">Download</a></td>
        </tr>
      </table>
    </div>
  </div>
  
  <a href="/expert" class="ad" style="margin-top:15px">
    <div class="title">&hellip; or the expert</div>
    <div class="url">theboostcpplibraries.com</div>
    <div class="content">
      <img src="/static/main/img/boris-schaeling-small.jpg" alt="Boris Schäling" width="74" height="74" style="float:left;margin-right:5px"/>
      <div style="font-size:1.2em;color:grey">Presentations,<br>trainings and<br>consulting on<br>Boost and C++</div>
    </div>
  </a>
  
  
  
  <div style="text-align:center;margin:15px 0px"><a href="/ad" style="color:darkgrey">Your exclusive ad here?</a></div>
  <!--script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-3679079217438126" data-ad-slot="4616164693" data-ad-format="auto"></ins>
  <script>(adsbygoogle = window.adsbygoogle || []).push({});</script-->
  

      </nav></div><div lang="en" class="chapter" id="boost.any"><div class="titlepage"><div><div><h1 class="title">Chapter 23. Boost.Any</h1></div></div></div><p>Strongly typed languages, such as C++, require that each variable have a specific type that defines what kind of information it can store. Other languages, such as JavaScript, allow developers to store any kind of information in a variable. For example, in JavaScript a single variable can contain a string, then a number, and afterwards a boolean value.</p><p><a class="link" href="http://www.boost.org/libs/any" target="_top">Boost.Any</a> provides the class <code class="classname">boost::any</code> which, like JavaScript variables, can store arbitrary types of information.</p>
    
    <div class="example" id="ex.any_01"><div class="example-title">Example 23.1. Using <code class="classname">boost::any</code></div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/any.hpp&gt;

int main()
{
  boost::any a = 1;
  a = 3.14;
  a = true;
}</code></pre></div></div>
    
  <p>To use <code class="classname">boost::any</code>, include the header file <code class="filename">boost/any.hpp</code>. Objects of type <code class="classname">boost::any</code> can then be created to store arbitrary information. In <a class="xref" href="boost.any#ex.any_01" title="Example 23.1. Using boost::any">Example 23.1</a>, <var class="varname">a</var> stores an <code class="type">int</code>, then a <code class="type">double</code>, then a <code class="type">bool</code>.</p><p>Variables of type <code class="classname">boost::any</code> are not completely unlimited in what they can store; there are some preconditions, albeit minimal ones. Any value stored in a variable of type <code class="classname">boost::any</code> must be copy-constructible. Thus, it is not possible to store a C array, since C arrays aren’t copy-constructible.</p><p>To store a string, and not just a pointer to a C string, use <code class="classname">std::string</code> (see <a class="xref" href="boost.any#ex.any_02" title="Example 23.2. Storing a string in boost::any">Example 23.2</a>).</p>
    
    <div class="example" id="ex.any_02"><div class="example-title">Example 23.2. Storing a string in <code class="classname">boost::any</code></div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/any.hpp&gt;
#include &lt;string&gt;

int main()
{
  boost::any a = std::string{"Boost"};
}</code></pre></div></div>
    
  <p>To access the value of <code class="classname">boost::any</code> variables, use the cast operator <code class="code">boost::any_cast</code> (see <a class="xref" href="boost.any#ex.any_03" title="Example 23.3. Accessing values with boost::any_cast">Example 23.3</a>).</p>
    
    <div class="example" id="ex.any_03"><div class="example-title">Example 23.3. Accessing values with <code class="code">boost::any_cast</code></div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/any.hpp&gt;
#include &lt;iostream&gt;

int main()
{
  boost::any a = 1;
  std::cout &lt;&lt; boost::any_cast&lt;int&gt;(a) &lt;&lt; '\n';
  a = 3.14;
  std::cout &lt;&lt; boost::any_cast&lt;double&gt;(a) &lt;&lt; '\n';
  a = true;
  std::cout &lt;&lt; std::boolalpha &lt;&lt; boost::any_cast&lt;bool&gt;(a) &lt;&lt; '\n';
}</code></pre></div></div>
    
  <p>By passing the appropriate type as a template parameter to <code class="code">boost::any_cast</code>, the value of the variable is converted. If an invalid type is specified, an exception of type <code class="exceptionname">boost::bad_any_cast</code> will be thrown.</p>
    
    <div class="example" id="ex.any_04"><div class="example-title">Example 23.4. <code class="exceptionname">boost::bad_any_cast</code> in case of an error</div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/any.hpp&gt;
#include &lt;iostream&gt;

int main()
{
  try
  {
    boost::any a = 1;
    std::cout &lt;&lt; boost::any_cast&lt;float&gt;(a) &lt;&lt; '\n';
  }
  catch (boost::bad_any_cast &amp;e)
  {
    std::cerr &lt;&lt; e.what() &lt;&lt; '\n';
  }
}</code></pre></div></div>
    
  <p><a class="xref" href="boost.any#ex.any_04" title="Example 23.4. boost::bad_any_cast in case of an error">Example 23.4</a> throws an exception because the template parameter of type <code class="type">float</code> does not match the type <code class="type">int</code> stored in <var class="varname">a</var>. The program would also throw an exception if <code class="type">short</code> or <code class="type">long</code> were used as the template parameter.</p><p>Because <code class="exceptionname">boost::bad_any_cast</code> is derived from <code class="exceptionname">std::bad_cast</code>, <code class="code">catch</code> handlers can catch exceptions of this type, too.</p><p>To check whether or not a variable of type <code class="classname">boost::any</code> contains information, use the member function <code class="methodname">empty()</code>. To check the type of the stored information, use the member function <code class="methodname">type()</code>.</p>
    
    <div class="example" id="ex.any_05"><div class="example-title">Example 23.5. Checking type of currently stored value</div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/any.hpp&gt;
#include &lt;typeinfo&gt;
#include &lt;iostream&gt;

int main()
{
  boost::any a = 1;
  if (!a.empty())
  {
    const std::type_info &amp;ti = a.type();
    std::cout &lt;&lt; ti.name() &lt;&lt; '\n';
  }
}</code></pre></div></div>
    
  <p><a class="xref" href="boost.any#ex.any_05" title="Example 23.5. Checking type of currently stored value">Example 23.5</a> uses both <code class="methodname">empty()</code> and <code class="methodname">type()</code>. While <code class="methodname">empty()</code> returns a boolean value, the return value of <code class="methodname">type()</code> is of type <code class="classname">std::type_info</code>, which is defined in the header file <code class="filename">typeinfo</code>.</p><p><a class="xref" href="boost.any#ex.any_06" title="Example 23.6. Accessing values through a pointer">Example 23.6</a> shows how to obtain a pointer to the value stored in a <code class="classname">boost::any</code> variable using <code class="code">boost::any_cast</code>.</p>
    
    <div class="example" id="ex.any_06"><div class="example-title">Example 23.6. Accessing values through a pointer</div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/any.hpp&gt;
#include &lt;iostream&gt;

int main()
{
  boost::any a = 1;
  int *i = boost::any_cast&lt;int&gt;(&amp;a);
  std::cout &lt;&lt; *i &lt;&lt; '\n';
}</code></pre></div></div>
    
  <p>You simply pass a pointer to a <code class="code">boost::any</code> variable to <code class="code">boost::any_cast</code>; the template parameter remains unchanged.</p></div><div><div class="prev"><a href="boost.tuple">Prev</a></div><div class="next"><a href="boost.variant">Next</a></div></div>
    <div id="disqus_thread"></div>
<script>
  var disqus_shortname = 'theboostcpplibraries';
  (function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<a href="https://github.com/BorisSchaeling/theboostcpplibraries" class="github-corner" aria-label="View source on Github" onclick="ga('send', 'event', 'github', 'click', 'view');return true;"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#ddd; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a>

  </body></html>
