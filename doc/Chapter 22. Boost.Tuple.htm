<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Chapter 22. Boost.Tuple</title><link rel="stylesheet" type="text/css" href="/static/main/css/main.css"><link rel="home" href="the-boost-c++-libraries" title="The Boost C++ Libraries"><link rel="prev" href="boost.optional" title="Chapter 21. Boost.Optional"><link rel="next" href="boost.any" title="Chapter 23. Boost.Any"><meta name="viewport" content="width=device-width, initial-scale=1"><link rel="shortcut icon" href="/favicon.ico"><link rel="stylesheet" href="//cdn.jsdelivr.net/highlight.js/9.11.0/styles/vs.min.css"><script onload="hljs.initHighlightingOnLoad()" src="//cdn.jsdelivr.net/highlight.js/9.11.0/highlight.min.js"></script><script>var disqus_identifier = 'boost.tuple';</script><script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
      ga('create', 'UA-59953346-1', 'auto');
      ga('send', 'pageview');
    </script><script async="async" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-54ede4aa2dd8667c"></script></head><body class="chapter"><div class="relative"><header><a href="the-boost-c++-libraries"><img src="/static/main/img/boost-logo.svg" alt="" width="20" height="20" id="boost-logo">The Boost C++ Libraries</a><a href="https://twitter.com/theboostcpplibs" class="twitter"><img src="/static/main/img/twitter.png" width="17" height="14" alt="Follow @theboostcpplibs" class="twitter"></a></header><nav><ul><li><a href="the-boost-c++-libraries">The Boost C++ Libraries</a><ul><li><a href="data-structures">Part IV. Data Structures</a><ul><li><a href="boost.optional">Chapter 21. Boost.Optional</a></li><li><strong><a href="boost.tuple">Chapter 22. Boost.Tuple</a></strong></li><li><a href="boost.any">Chapter 23. Boost.Any</a></li><li><a href="boost.variant">Chapter 24. Boost.Variant</a></li><li><a href="boost.propertytree">Chapter 25. Boost.PropertyTree</a></li><li><a href="boost.dynamicbitset">Chapter 26. Boost.DynamicBitset</a></li><li><a href="boost.tribool">Chapter 27. Boost.Tribool</a></li><li><a href="boost.compressed_pair">Chapter 28. Boost.CompressedPair</a></li></ul></li></ul></li></ul>
        
<script>
  (function() {
    var cx = '011552474235077786014:zyife9oy_sk';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//cse.google.com/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script>
<div class="gcse-search"></div>
<script>
function onAdClick() {
  var ad = document.querySelector('.ad');
  ad.style.cursor = 'default';
  var img = document.querySelector('.ad .content img');
  img.style.display = 'none';
  var links = document.getElementsByClassName('shoplink');
  for (var i = 0; i < links.length; ++i) {
    links[i].style.display = 'inline';
  }
  ga('send', 'event', 'ad', 'click', 'book');
}
</script>
  <div class="ad" onclick="onAdClick()" style="cursor:pointer;width:200px;margin-top:7px">
    <div class="title">Get the book</div>
    <div class="url">theboostcpplibraries.com</div>
    <div class="content">
      <img src="/static/main/img/book-cover-small.png" alt="The Boost C++ Libraries" width="74" height="94" style="float:left;margin-right:5px"/>
      <table style="font-size:1.2em;border-collapse:collapse">
        <tr>
          <td style="text-align:right">$45.95</td>
          <td>Print</td>
          <td class="shoplink" style="display:none"><a href="https://www.amazon.com/gp/product/1937434362/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1937434362&amp;linkCode=as2&amp;tag=theboostcppli-20&amp;linkId=ZD2OKWS6OJX5F3S3" style="text-decoration:underline" onclick="ga('send', 'event', 'ad', 'click', 'print');return true;">Amazon</a></td>
        </tr>
        <tr>
          <td style="text-align:right">$9.99</td>
          <td>Kindle</td>
          <td class="shoplink" style="display:none"><a href="https://www.amazon.com/gp/product/B00OX0KJOK/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00OX0KJOK&amp;linkCode=as2&amp;tag=theboostcppli-20&amp;linkId=B5LGTSOTEZ6C7EVL" style="text-decoration:underline" onclick="ga('send', 'event', 'ad', 'click', 'kindle');return true;">Amazon</a></td>
        </tr>
        <tr>
          <td style="text-align:right">$9.99</td>
          <td>E-book</td>
          <td class="shoplink" style="display:none"><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=F7WCSZLHDU9GN" style="text-decoration:underline" onclick="ga('send', 'event', 'ad', 'click', 'ebook');return true;">Download</a></td>
        </tr>
        <tr>
          <td style="text-align:right">$9.99</td>
          <td>PDF</td>
          <td class="shoplink" style="display:none"><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=HMMF8LP558LHL" style="text-decoration:underline" onclick="ga('send', 'event', 'ad', 'click', 'pdf');return true;">Download</a></td>
        </tr>
      </table>
    </div>
  </div>
  
  <a href="/expert" class="ad" style="margin-top:15px">
    <div class="title">&hellip; or the expert</div>
    <div class="url">theboostcpplibraries.com</div>
    <div class="content">
      <img src="/static/main/img/boris-schaeling-small.jpg" alt="Boris Schäling" width="74" height="74" style="float:left;margin-right:5px"/>
      <div style="font-size:1.2em;color:grey">Presentations,<br>trainings and<br>consulting on<br>Boost and C++</div>
    </div>
  </a>
  
  
  
  <div style="text-align:center;margin:15px 0px"><a href="/ad" style="color:darkgrey">Your exclusive ad here?</a></div>
  <!--script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-3679079217438126" data-ad-slot="4616164693" data-ad-format="auto"></ins>
  <script>(adsbygoogle = window.adsbygoogle || []).push({});</script-->
  

      </nav></div><div lang="en" class="chapter" id="boost.tuple"><div class="titlepage"><div><div><h1 class="title">Chapter 22. Boost.Tuple</h1></div></div></div><p>The library <a class="link" href="http://www.boost.org/libs/tuple" target="_top">Boost.Tuple</a> provides a class called <code class="classname">boost::tuple</code>, which is a generalized version of <code class="classname">std::pair</code>. While <code class="classname">std::pair</code> can only store exactly two values, <code class="classname">boost::tuple</code> lets you choose how many values to store.</p><p>The standard library has provided the class <code class="classname">std::tuple</code> since C++11. If you work with a development environment supporting C++11, you can ignore Boost.Tuple because <code class="classname">boost::tuple</code> and <code class="classname">std::tuple</code> are identical.</p>
    
    <div class="example" id="ex.tuple_01"><div class="example-title">Example 22.1. <code class="classname">boost::tuple</code> replacing <code class="classname">std::pair</code></div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/tuple/tuple.hpp&gt;
#include &lt;boost/tuple/tuple_io.hpp&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
  typedef boost::tuple&lt;std::string, int&gt; animal;
  animal a{"cat", 4};
  std::cout &lt;&lt; a &lt;&lt; '\n';
}</code></pre></div></div>
    
  <p>To use <code class="classname">boost::tuple</code>, include the header file <code class="filename">boost/tuple/tuple.hpp</code>. To use tuples with streams, include the header file <code class="filename">boost/tuple/tuple_io.hpp</code>. Boost.Tuple doesn’t provide a master header file that automatically includes all others.</p><p><code class="classname">boost::tuple</code> is used in the same way <code class="classname">std::pair</code> is. In <a class="xref" href="boost.tuple#ex.tuple_01" title="Example 22.1. boost::tuple replacing std::pair">Example 22.1</a>, a tuple containing one value of type <code class="classname">std::string</code> and one value of type <code class="type">int</code> is created. This type is called <code class="type">animal</code>, and it stores the name and the number of legs of an animal.</p><p>While the definition of type <code class="type">animal</code> could have used <code class="classname">std::pair</code>, objects of type <code class="classname">boost::tuple</code> can be written to a stream. To do this you must include the header file <code class="filename">boost/tuple/tuple_io.hpp</code>, which provides the required operators. <a class="xref" href="boost.tuple#ex.tuple_01" title="Example 22.1. boost::tuple replacing std::pair">Example 22.1</a> displays <code class="computeroutput">(cat 4)</code>.</p>
    
    <div class="example" id="ex.tuple_02"><div class="example-title">Example 22.2. <code class="classname">boost::tuple</code> as the better <code class="classname">std::pair</code></div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/tuple/tuple.hpp&gt;
#include &lt;boost/tuple/tuple_io.hpp&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
  typedef boost::tuple&lt;std::string, int, bool&gt; animal;
  animal a{"cat", 4, true};
  std::cout &lt;&lt; std::boolalpha &lt;&lt; a &lt;&lt; '\n';
}</code></pre></div></div>
    
  <p><a class="xref" href="boost.tuple#ex.tuple_02" title="Example 22.2. boost::tuple as the better std::pair">Example 22.2</a> stores a name, the number of legs, and a flag that indicates whether the animal has a tail. All three values are placed in a tuple. When executed, this program displays <code class="computeroutput">(cat 4 true)</code>.</p><p>You can create a tuple using the helper function <code class="function">boost::make_tuple()</code>, which works like the helper function <code class="function">std::make_pair()</code> for <code class="classname">std::pair</code> (see <a class="xref" href="boost.tuple#ex.tuple_03" title="Example 22.3. Creating tuples with boost::make_tuple()">Example 22.3</a>).</p>
    
    <div class="example" id="ex.tuple_03"><div class="example-title">Example 22.3. Creating tuples with <code class="function">boost::make_tuple()</code></div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/tuple/tuple.hpp&gt;
#include &lt;boost/tuple/tuple_io.hpp&gt;
#include &lt;iostream&gt;

int main()
{
  std::cout.setf(std::ios::boolalpha);
  std::cout &lt;&lt; boost::make_tuple("cat", 4, true) &lt;&lt; '\n';
}</code></pre></div></div>
    
  <p>A tuple can also contain references, as shown in <a class="xref" href="boost.tuple#ex.tuple_04" title="Example 22.4. Tuples with references">Example 22.4</a>.</p>
    
    <div class="example" id="ex.tuple_04"><div class="example-title">Example 22.4. Tuples with references</div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/tuple/tuple.hpp&gt;
#include &lt;boost/tuple/tuple_io.hpp&gt;
#include &lt;boost/ref.hpp&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
  std::string s = "cat";
  std::cout.setf(std::ios::boolalpha);
  std::cout &lt;&lt; boost::make_tuple(boost::ref(s), 4, true) &lt;&lt; '\n';
}</code></pre></div></div>
    
  <p>The values 4 and <code class="literal">true</code> are passed by value and, thus, are stored directly inside the tuple, However, the first element is a reference to the string <var class="varname">s</var>. The function <code class="function">boost::ref()</code> from Boost.Ref is used to create the reference. To create a constant reference, use <code class="function">boost::cref()</code>.</p><p>Usually, you can use <code class="function">std::ref()</code> from the C++11 standard library instead of <code class="function">boost::ref()</code>. However, <a class="xref" href="boost.tuple#ex.tuple_04" title="Example 22.4. Tuples with references">Example 22.4</a> uses <code class="function">boost::ref()</code> because only Boost.Ref provides an operator to write to standard output.</p><p><code class="classname">std::pair</code> uses the member variables <var class="varname">first</var> and <var class="varname">second</var> to provide access. Because a tuple does not have a fixed number of elements, access must be handled differently.</p>
    
    <div class="example" id="ex.tuple_05"><div class="example-title">Example 22.5. Reading elements of a tuple</div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/tuple/tuple.hpp&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
  typedef boost::tuple&lt;std::string, int, bool&gt; animal;
  animal a = boost::make_tuple("cat", 4, true);
  std::cout &lt;&lt; a.get&lt;0&gt;() &lt;&lt; '\n';
  std::cout &lt;&lt; boost::get&lt;0&gt;(a) &lt;&lt; '\n';
}</code></pre></div></div>
    
  <p>There are two ways to access values in a tuple. You can call the member function <code class="methodname">get()</code>, or you can pass the tuple to the free-standing function <code class="function">boost::get()</code>. In both cases, the index of the corresponding element in the tuple must be provided as a template parameter. <a class="xref" href="boost.tuple#ex.tuple_05" title="Example 22.5. Reading elements of a tuple">Example 22.5</a> accesses the first element of the tuple <var class="varname">a</var> in both cases and, thus, displays <code class="computeroutput">cat</code> twice.</p><p>Specifying an invalid index results in a compiler error because index validity is checked at compile time.</p><p>The member function <code class="methodname">get()</code> and the free-standing function <code class="function">boost::get()</code> both return a reference that allows you to change a value inside a tuple.</p>
    
    <div class="example" id="ex.tuple_06"><div class="example-title">Example 22.6. Writing elements of a tuple</div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/tuple/tuple.hpp&gt;
#include &lt;boost/tuple/tuple_io.hpp&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
  typedef boost::tuple&lt;std::string, int, bool&gt; animal;
  animal a = boost::make_tuple("cat", 4, true);
  a.get&lt;0&gt;() = "dog";
  std::cout &lt;&lt; std::boolalpha &lt;&lt; a &lt;&lt; '\n';
}</code></pre></div></div>
    
  <p><a class="xref" href="boost.tuple#ex.tuple_06" title="Example 22.6. Writing elements of a tuple">Example 22.6</a> modifies the animal’s name and, thus, displays <code class="computeroutput">(dog 4 true)</code>.</p><p>Boost.Tuple also defines comparison operators. To compare tuples, include the header file <code class="filename">boost/tuple/tuple_comparison.hpp</code>.</p>
    
    <div class="example" id="ex.tuple_07"><div class="example-title">Example 22.7. Comparing tuples</div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/tuple/tuple.hpp&gt;
#include &lt;boost/tuple/tuple_comparison.hpp&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
  typedef boost::tuple&lt;std::string, int, bool&gt; animal;
  animal a1 = boost::make_tuple("cat", 4, true);
  animal a2 = boost::make_tuple("shark", 0, true);
  std::cout &lt;&lt; std::boolalpha &lt;&lt; (a1 != a2) &lt;&lt; '\n';
}</code></pre></div></div>
    
  <p><a class="xref" href="boost.tuple#ex.tuple_07" title="Example 22.7. Comparing tuples">Example 22.7</a> displays <code class="computeroutput">true</code> because the tuples <var class="varname">a1</var> and <var class="varname">a2</var> are different.</p><p>The header file <code class="filename">boost/tuple/tuple_comparison.hpp</code> also contains definitions for other comparison operators such as greater-than, which performs a lexicographical comparison.</p><p>Boost.Tuple supports a specific form of tuples called <span class="concept">tier</span>. Tiers are tuples whose elements are all reference types. They can be constructed with the function <code class="function">boost::tie()</code>.</p>
    
    <div class="example" id="ex.tuple_08"><div class="example-title">Example 22.8. Creating a tier with <code class="function">boost::tie()</code></div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/tuple/tuple.hpp&gt;
#include &lt;boost/tuple/tuple_io.hpp&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
  typedef boost::tuple&lt;std::string&amp;, int&amp;, bool&amp;&gt; animal;
  std::string name = "cat";
  int legs = 4;
  bool tail = true;
  animal a = boost::tie(name, legs, tail);
  name = "dog";
  std::cout &lt;&lt; std::boolalpha &lt;&lt; a &lt;&lt; '\n';
}</code></pre></div></div>
    
  <p><a class="xref" href="boost.tuple#ex.tuple_08" title="Example 22.8. Creating a tier with boost::tie()">Example 22.8</a> creates a tier <var class="varname">a</var>, which consists of references to the variables <var class="varname">name</var>, <var class="varname">legs</var>, and <var class="varname">tail</var>. When the variable <var class="varname">name</var> is modified, the tier is modified at the same time.</p><p><a class="xref" href="boost.tuple#ex.tuple_08" title="Example 22.8. Creating a tier with boost::tie()">Example 22.8</a> could have also been written using <code class="function">boost::make_tuple()</code> and <code class="function">boost::ref()</code> (see <a class="xref" href="boost.tuple#ex.tuple_09" title="Example 22.9. Creating a tier without boost::tie()">Example 22.9</a>).</p>
    
    <div class="example" id="ex.tuple_09"><div class="example-title">Example 22.9. Creating a tier without <code class="function">boost::tie()</code></div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/tuple/tuple.hpp&gt;
#include &lt;boost/tuple/tuple_io.hpp&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
  typedef boost::tuple&lt;std::string&amp;, int&amp;, bool&amp;&gt; animal;
  std::string name = "cat";
  int legs = 4;
  bool tail = true;
  animal a = boost::make_tuple(boost::ref(name), boost::ref(legs),
    boost::ref(tail));
  name = "dog";
  std::cout &lt;&lt; std::boolalpha &lt;&lt; a &lt;&lt; '\n';
}</code></pre></div></div>
    
  <p><code class="function">boost::tie()</code> shortens the syntax. This function can also be used to unpack tuples. In <a class="xref" href="boost.tuple#ex.tuple_10" title="Example 22.10. Unpacking return values of a function from a tuple">Example 22.10</a>, the individual values of the tuple, returned by a function, are instantly stored in variables.</p>
    
    <div class="example" id="ex.tuple_10"><div class="example-title">Example 22.10. Unpacking return values of a function from a tuple</div><div class="example-contents"><pre class="programlisting"><code class="cpp">#include &lt;boost/tuple/tuple.hpp&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

boost::tuple&lt;std::string, int&gt; new_cat()
{
  return boost::make_tuple("cat", 4);
}

int main()
{
  std::string name;
  int legs;
  boost::tie(name, legs) = new_cat();
  std::cout &lt;&lt; name &lt;&lt; ", " &lt;&lt; legs &lt;&lt; '\n';
}</code></pre></div></div>
    
  <p><code class="function">boost::tie()</code> stores the string <span class="quote">“<span class="quote">cat</span>”</span> and the number 4, both of which are returned as a tuple from <code class="function">new_cat()</code>, in the variables <var class="varname">name</var> and <var class="varname">legs</var>.</p></div><div><div class="prev"><a href="boost.optional">Prev</a></div><div class="next"><a href="boost.any">Next</a></div></div>
    <div id="disqus_thread"></div>
<script>
  var disqus_shortname = 'theboostcpplibraries';
  (function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<a href="https://github.com/BorisSchaeling/theboostcpplibraries" class="github-corner" aria-label="View source on Github" onclick="ga('send', 'event', 'github', 'click', 'view');return true;"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#ddd; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a>

  </body></html>
